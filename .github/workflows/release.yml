name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-valid: ${{ steps.validate.outputs.is-valid }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get-version
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          echo "version=$TAG" >> $GITHUB_OUTPUT
          echo "Version: $TAG"

      - name: Validate tag format
        id: validate
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          
          # Check if tag matches semantic versioning
          if [[ ! "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag must follow semantic versioning (x.y.z)"
            echo "is-valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "is-valid=true" >> $GITHUB_OUTPUT
          echo "✓ Tag format valid: v$TAG"

      - name: Check version consistency
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          
          # Check plugin file version
          PLUGIN_VERSION=$(grep "^ \* Version:" acf-location-shortcodes.php | sed 's/.*Version: *//' | tr -d '[:space:]')
          CONST_VERSION=$(grep "define( 'ACF_LS_VERSION'" acf-location-shortcodes.php | grep -oP "'\K[0-9.]+(?=')")
          
          if [ "$TAG" != "$PLUGIN_VERSION" ]; then
            echo "Error: Tag version ($TAG) doesn't match plugin version ($PLUGIN_VERSION)"
            exit 1
          fi
          
          if [ "$TAG" != "$CONST_VERSION" ]; then
            echo "Error: Tag version ($TAG) doesn't match constant version ($CONST_VERSION)"
            exit 1
          fi
          
          # Check CHANGELOG
          if ! grep -q "## \[$TAG\]" CHANGELOG.md; then
            echo "Warning: CHANGELOG.md doesn't contain entry for version $TAG"
          fi
          
          echo "✓ Version consistency validated"
          echo "  Tag: v$TAG"
          echo "  Plugin: $PLUGIN_VERSION"
          echo "  Constant: $CONST_VERSION"

  build-release:
    name: Build Release Package
    runs-on: ubuntu-latest
    needs: validate-tag
    if: needs.validate-tag.outputs.is-valid == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          coverage: none

      - name: Get plugin slug
        id: slug
        run: |
          SLUG="acf-service-management-suite"
          echo "slug=$SLUG" >> $GITHUB_OUTPUT
          echo "Plugin slug: $SLUG"

      - name: Create release directory structure
        run: |
          SLUG="${{ steps.slug.outputs.slug }}"
          VERSION="${{ needs.validate-tag.outputs.version }}"
          
          echo "Building release package for v$VERSION..."
          
          # Create temporary build directory
          mkdir -p build/$SLUG
          
          # Copy plugin files
          cp -r includes build/$SLUG/
          cp -r assets build/$SLUG/
          cp acf-location-shortcodes.php build/$SLUG/
          cp README.md build/$SLUG/readme.txt
          cp CHANGELOG.md build/$SLUG/
          cp LICENSE build/$SLUG/ 2>/dev/null || echo "No LICENSE file found"
          
          # Copy ACF export if exists
          if [ -f acf-export-*.json ]; then
            cp acf-export-*.json build/$SLUG/
          fi
          
          echo "✓ Files copied to build directory"

      - name: Convert README.md to WordPress readme.txt format
        run: |
          SLUG="${{ steps.slug.outputs.slug }}"
          VERSION="${{ needs.validate-tag.outputs.version }}"
          
          # Create WordPress-style readme.txt using printf for better compatibility
          printf "=== ACF Service Management Suite ===\n" > build/$SLUG/readme.txt
          printf "Contributors: fallstechgroup\n" >> build/$SLUG/readme.txt
          printf "Tags: acf, advanced custom fields, shortcodes, locations, services\n" >> build/$SLUG/readme.txt
          printf "Requires at least: 5.8\n" >> build/$SLUG/readme.txt
          printf "Tested up to: 6.4\n" >> build/$SLUG/readme.txt
          printf "Requires PHP: 7.4\n" >> build/$SLUG/readme.txt
          printf "Stable tag: %s\n" "$VERSION" >> build/$SLUG/readme.txt
          printf "License: GPLv2 or later\n" >> build/$SLUG/readme.txt
          printf "License URI: https://www.gnu.org/licenses/gpl-2.0.html\n\n" >> build/$SLUG/readme.txt
          printf "Powerful shortcode toolkit for ACF-powered WordPress sites. Display locations, team members, and custom field data anywhere.\n\n" >> build/$SLUG/readme.txt
          printf "== Description ==\n\n" >> build/$SLUG/readme.txt
          printf "ACF Service Management Suite is a comprehensive toolkit that extends Advanced Custom Fields with powerful shortcodes for displaying location data, team members, and custom field information throughout your WordPress site.\n\n" >> build/$SLUG/readme.txt
          printf "= Features =\n\n" >> build/$SLUG/readme.txt
          printf "* Display specific location information with simple shortcodes\n" >> build/$SLUG/readme.txt
          printf "* Show team member details anywhere on your site\n" >> build/$SLUG/readme.txt
          printf "* Formatted address display with schema.org markup\n" >> build/$SLUG/readme.txt
          printf "* Elementor query filtering integration\n" >> build/$SLUG/readme.txt
          printf "* Performance-optimized with intelligent caching\n" >> build/$SLUG/readme.txt
          printf "* Security-first design with proper escaping\n" >> build/$SLUG/readme.txt
          printf "* Fully responsive CSS included\n\n" >> build/$SLUG/readme.txt
          printf "= Shortcodes =\n\n" >> build/$SLUG/readme.txt
          printf "* [location_field] - Display any ACF field from a location post\n" >> build/$SLUG/readme.txt
          printf "* [location_address] - Show formatted address with schema markup\n" >> build/$SLUG/readme.txt
          printf "* [location_list] - Display a list of all locations\n" >> build/$SLUG/readme.txt
          printf "* [team_member_field] - Display team member information\n\n" >> build/$SLUG/readme.txt
          printf "See the full documentation for detailed usage examples.\n\n" >> build/$SLUG/readme.txt
          printf "== Installation ==\n\n" >> build/$SLUG/readme.txt
          printf "1. Upload the plugin files to /wp-content/plugins/acf-service-management-suite/\n" >> build/$SLUG/readme.txt
          printf "2. Activate the plugin through the Plugins menu in WordPress\n" >> build/$SLUG/readme.txt
          printf "3. Ensure ACF (Free or Pro) is installed and activated\n" >> build/$SLUG/readme.txt
          printf "4. Import the included ACF field groups (Tools -> Import Field Groups)\n" >> build/$SLUG/readme.txt
          printf "5. Create your location and team member posts\n" >> build/$SLUG/readme.txt
          printf "6. Use shortcodes anywhere on your site\n\n" >> build/$SLUG/readme.txt
          printf "== Frequently Asked Questions ==\n\n" >> build/$SLUG/readme.txt
          printf "= Does this plugin require ACF Pro? =\n\n" >> build/$SLUG/readme.txt
          printf "No, it works with both ACF Free and ACF Pro. However, some features may require ACF Pro.\n\n" >> build/$SLUG/readme.txt
          printf "= Can I use this with Elementor? =\n\n" >> build/$SLUG/readme.txt
          printf "Yes! The plugin includes Elementor integration for query filtering.\n\n" >> build/$SLUG/readme.txt
          printf "= How do I add custom fields? =\n\n" >> build/$SLUG/readme.txt
          printf "Use the included ACF JSON export file or create your own field groups in ACF.\n\n" >> build/$SLUG/readme.txt
          printf "== Changelog ==\n\n" >> build/$SLUG/readme.txt
          printf "See CHANGELOG.md for detailed version history.\n\n" >> build/$SLUG/readme.txt
          printf "= %s =\n" "$VERSION" >> build/$SLUG/readme.txt
          printf "* See CHANGELOG.md for full release notes\n\n" >> build/$SLUG/readme.txt
          printf "== Upgrade Notice ==\n\n" >> build/$SLUG/readme.txt
          printf "= %s =\n" "$VERSION" >> build/$SLUG/readme.txt
          printf "See CHANGELOG.md for upgrade information.\n" >> build/$SLUG/readme.txt
          
          echo "✓ WordPress readme.txt created"

      - name: Remove development files
        run: |
          SLUG="${{ steps.slug.outputs.slug }}"
          
          # Remove files that shouldn't be in release
          cd build/$SLUG
          
          # Remove development/documentation files
          rm -f DEVELOP.md
          rm -f copilot-instructions.md
          rm -rf workspace/
          rm -f .gitignore
          rm -f .gitattributes
          rm -rf .git/
          rm -rf .github/
          
          # Remove any backup or temporary files
          find . -name "*.log" -delete
          find . -name "*.tmp" -delete
          find . -name "*.old" -delete
          find . -name "*.bak" -delete
          find . -name ".DS_Store" -delete
          find . -name "Thumbs.db" -delete
          
          echo "✓ Development files removed"
          
          cd ../..

      - name: Create ZIP archive
        run: |
          SLUG="${{ steps.slug.outputs.slug }}"
          VERSION="${{ needs.validate-tag.outputs.version }}"
          
          cd build
          zip -r ../$SLUG-$VERSION.zip $SLUG/
          cd ..
          
          echo "✓ Release package created: $SLUG-$VERSION.zip"
          
          # Show package contents
          echo ""
          echo "Package contents:"
          unzip -l $SLUG-$VERSION.zip | head -20

      - name: Generate checksums
        run: |
          SLUG="${{ steps.slug.outputs.slug }}"
          VERSION="${{ needs.validate-tag.outputs.version }}"
          
          sha256sum $SLUG-$VERSION.zip > $SLUG-$VERSION.zip.sha256
          md5sum $SLUG-$VERSION.zip > $SLUG-$VERSION.zip.md5
          
          echo "✓ Checksums generated"
          cat $SLUG-$VERSION.zip.sha256
          cat $SLUG-$VERSION.zip.md5

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-package
          path: |
            *.zip
            *.sha256
            *.md5
          retention-days: 5

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-tag, build-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-package

      - name: Extract changelog for this version
        id: changelog
        run: |
          VERSION="${{ needs.validate-tag.outputs.version }}"
          
          # Extract changelog section for this version
          if grep -q "## \[$VERSION\]" CHANGELOG.md; then
            sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$ d' > release-notes.md
            echo "✓ Changelog extracted for v$VERSION"
          else
            echo "No changelog entry found for v$VERSION" > release-notes.md
            echo "⚠ No changelog entry found, using default"
          fi
          
          # Show release notes
          echo ""
          echo "Release notes:"
          cat release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ACF Service Management Suite v${{ needs.validate-tag.outputs.version }}
          body_path: release-notes.md
          files: |
            *.zip
            *.sha256
            *.md5
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          VERSION="${{ needs.validate-tag.outputs.version }}"
          SLUG="acf-service-management-suite"
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Release v$VERSION Published Successfully!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "📦 Package: $SLUG-$VERSION.zip"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
          echo ""
          echo "Checksums:"
          cat *.sha256
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
